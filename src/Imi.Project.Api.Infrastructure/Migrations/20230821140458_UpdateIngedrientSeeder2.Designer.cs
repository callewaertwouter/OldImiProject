// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230821140458_UpdateIngedrientSeeder2")]
    partial class UpdateIngedrientSeeder2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingedrients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5652),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5653),
                            Name = "Melk",
                            UnitOfMeasure = "liter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5655),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5655),
                            Name = "Laurier",
                            UnitOfMeasure = "takjes"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5657),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5657),
                            Name = "Gehakt",
                            UnitOfMeasure = "kilo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5658),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5659),
                            Name = "Tomatenpuree",
                            UnitOfMeasure = "blik"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5660),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5660),
                            Name = "Boter",
                            UnitOfMeasure = "gram"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5662),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5662),
                            Name = "Paprika",
                            UnitOfMeasure = ""
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5663),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5664),
                            Name = "Wortel",
                            UnitOfMeasure = ""
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5665),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5665),
                            Name = "Ajuin",
                            UnitOfMeasure = ""
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5666),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5667),
                            Name = "Kippenbouillon",
                            UnitOfMeasure = "liter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5668),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5668),
                            Name = "Olijfolie",
                            UnitOfMeasure = "centiliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5670),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5670),
                            Name = "Champignons",
                            UnitOfMeasure = "bakjes"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5672),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5673),
                            Name = "Gemalen kaas",
                            UnitOfMeasure = "gram"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5675),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5675),
                            Name = "Spaghetti",
                            UnitOfMeasure = ""
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CreatedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5676),
                            LastEditedOn = new DateTime(2023, 8, 21, 14, 4, 58, 291, DateTimeKind.Utc).AddTicks(5677),
                            Name = "Courgette",
                            UnitOfMeasure = ""
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5704),
                            Description = "Dit recept test de werking van dit recept.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5747),
                            Title = "Testrecept",
                            UserId = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5751),
                            Description = "Maak een roux van de boter en de bloem. Dit doe je door de boter in een steelpannetje te smelten. Doe de bloem bij de boter en roer met de garde.\r\n\r\nLaat het mengsel een beetje opdrogen in het pannetje, tot je de geur van koekjes ruikt.\r\n\r\nGiet er beetje bij beetje de koude melk bij en roer telkens het mengsel glad. Breng al roerend aan de kook, op matig vuur. Laat de witte saus indikken en laat nog enkele minuten doorkoken zodat de bloemsmaak verdwijnt.Breng op smaak met nootmuskaat, peper en zout.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5753),
                            Title = "Witte saus",
                            UserId = "4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5756),
                            Description = "Koop brochetten van de slager, easy. Smijt ze in een ovenpan, doe er boter over en zet ze in de combi-oven. Serveer met rijst en wortelen.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5758),
                            Title = "Gemarineerde brochetten",
                            UserId = "2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5761),
                            Description = "Neem een ruime mengschaal, doe er het warm water in en week er de gedroogde paddenstoelen in. Het eekhoorntjesbrood zal z’n smaak afgeven en het water in een bouillon veranderen. Pel de uien en snij ze in grove stukken. Verhit een ruime stoofpot of een soepketel. Smelt er een klont boter in en stoof de stukken ui. Snij de stammen prei overlangs door, snij het donkerste loof weg en spoel ze onder stromend water. Snij de gewassen prei in grove stukken en stoof ze mee met de uien. Pel de look, snij de teentjes grof en laat ze ook meestoven. Maak 2/3 van de Parijse paddenstoelen schoon. Gebruik een borsteltje en snij (indien nodig) het steeltje wat bij. Snij de paddenstoelen vervolgens middendoor en laat ze meestoven. Hou 1/3 van de paddenstoelen opzij. Maak een bouquet garni met enkele blaadjes laurier, wat tijm en (indien beschikbaar) peterseliestengels. Bind alles samen met een eindje keukentouw en laat het kruidentuiltje meestoven. Schil de aardappelen en snij ze in grove stukken. Laat ze meestoven. Zeef de bouillon van eekhoorntjesbrood en giet het vocht in de soepketel met gestoofde groenten. De rubberachtige gewelde paddenstoelen gebruiken we niet. Laat de soep een half uur sudderen op een zacht vuur. Intussen kan je de kaasstengels bereiden. Verwijder het bouquet garni en mix de soep glad met een staafmixer. Je hoeft ze niet te zeven. Mix er ook een flinke scheut room in. Proef de soep en kruid het gerecht naar smaak met wat peper van de molen en een snuif zout.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5762),
                            Title = "Champignonsoep",
                            UserId = "8"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5765),
                            Description = "Meng gehakt en ajuin in een schaal en mix ze. Smijt de mix in een ovenpan en herschaap het tot een brood. Doe er vervolgens paneermeel en boter over. 20 minuten in de combi-oven. Kook de patatten en de bonen. Smakelijk.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5767),
                            Title = "Gehaktbrood met bonen en patatten",
                            UserId = "3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5770),
                            Description = "Wortelen snijden en koken. Kook de patatten. Doe de hamburger in een pan en laat het bakken. Easy-peasy.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5771),
                            Title = "Hamburger met wortel en patatten",
                            UserId = "9"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5802),
                            Description = "1-pansgerecht met viskroketjes en patatjes. Groenten zijn voor de dieren.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5804),
                            Title = "Viskroketjes met gebakken aardappelen",
                            UserId = "5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5807),
                            Description = "Patatten koken tot ze zacht zijn. Water afgieten, doe er melk en nootmuskaat bij. Grillworst in de microgolfoven voor anderhalf minuut ofzo.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5809),
                            Title = "Grillworst met puree",
                            UserId = "7"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5812),
                            Description = "1) Snij de ajuin, paprika, wortelen, courgette en champignons tot je ze klein genoeg vindt. Doe ze vervolgens allemaal in de pot met wat boter.2) Smijt het gehakt in een pan en bak ze lichtjes. Kap ze in kleinere stukken eenmaal de buitenkant gebakken is.3) Kook de spaghetti en voeg voldoende tomatenpuree en kruiden bij de bolognaise.4) Serveer met gemalen kaas.5) Bon appetit.",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5813),
                            Title = "Spaghetti bolognaise",
                            UserId = "2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5816),
                            Description = "Ga naar de frituur ipv te koken. Ongelooflijk goed he LOL!",
                            LastEditedOn = new DateTime(2023, 8, 21, 16, 4, 58, 291, DateTimeKind.Local).AddTicks(5818),
                            Title = "Ongelooflijk goed gerecht",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitsOfMeasure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            MeasureUnit = "gram"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            MeasureUnit = "liter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            MeasureUnit = "blik(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            MeasureUnit = "tak(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            MeasureUnit = "blaadje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            MeasureUnit = "deciliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            MeasureUnit = "centiliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            MeasureUnit = "bakje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            MeasureUnit = "vrij naar keuze"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            MeasureUnit = "geen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            MeasureUnit = " "
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d75ae1cd-68fa-4377-81f3-3d3d81e417ed",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFojxb38D7eFmutmk9JpEFXHEQNNPtpF6aSMm8MYZgypKZs5rZAptRH2gGBwUcr4tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84dd44a5-4660-42e0-a44a-c4a55b443d74",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4cbd8a88-187a-42eb-937e-7c45dd43ed09",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEe6J6l9kgkgIJBuj+4cbjs0BQe7++2NDNw2xNW/AeE23cptvAwATB/vJrylHwQbWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6881b5b9-98b5-48d9-b05d-9a3d10155d13",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4875ef3c-4af9-4c42-822d-0d2b12c533e1",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEIC7QOmzV10ePq4T0uZBURo+fKjQDQ10Y/n4o03nwgOWElPDVSRhh8h9/0e04A+80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfc98414-d270-4ef8-adc4-fab694f91be3",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bc53111b-5006-4751-a055-b2a04b2696d6",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKHiB/54C/FpuS0Y897b4T+ltxPPmTBav12GfnxaKhWvneTRt7+0/etKY3qeWozqXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49937fc2-58c0-4e87-aa3d-d6235553267b",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "de5d100c-942c-4ded-9fbe-bb5ce1ff686b",
                            Email = "woutercallewaert@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WOUTERCALLEWAERT@GMAIL.COM",
                            NormalizedUserName = "YUSIFER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPEiaFebRJ2RmjnCJolNAWngCvdwOExV9s8CAahCy5yxpkdsKwjqr9GRq/XMv4SQHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf42a9f6-e009-45de-97d9-4de1aa541dbd",
                            TwoFactorEnabled = false,
                            UserName = "Yusifer"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1980, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "28fdf998-4c10-4538-8c56-1c59b275076e",
                            Email = "jjameson@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JJAMESON@HOTMAIL.COM",
                            NormalizedUserName = "JJJ",
                            PasswordHash = "AQAAAAEAACcQAAAAEGNIPqy2Qk4efl0UnJjunZK9CeSlRsRVvgvrbN70E+RRABhwC8Jf5QcleSplTGH9gQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6d5c4fe-25b4-48e3-84e2-d14ab997fb37",
                            TwoFactorEnabled = false,
                            UserName = "JJJ"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5fd32ec2-bb81-4df5-b2f8-f0441ae2c51c",
                            Email = "tigbiddies@xxx.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIGBIDDIES@XXX.COM",
                            NormalizedUserName = "BIGPP",
                            PasswordHash = "AQAAAAEAACcQAAAAEClHRaH7QrZUi+8wTL+vuU0Fe+7WG5s9dYLJOeeNdvlDjvt4RMadhho8iDKz+t5EhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be1efa08-ab1f-4623-afb9-b7e97a836a61",
                            TwoFactorEnabled = false,
                            UserName = "BigPP"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1995, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0d1ab84f-0a7d-45c5-bb5d-44b1b5ae059c",
                            Email = "allthebutz@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLTHEBUTZ@HOTMAIL.COM",
                            NormalizedUserName = "ALLTHEB",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkneS+0k+zOTZjj56pyjNh022FKD6Q3bBn8YdVAPeguzHx7wUV3oYI9jrKMuFtyEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "784284f4-fb20-4eab-95c8-934893124363",
                            TwoFactorEnabled = false,
                            UserName = "AlltheB"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2010, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "588f909d-3b5a-4ff0-b8d4-5e93bd520f1f",
                            Email = "ikloopindiestrond@gagmaker.net",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IKLOOPINDIESTROND@GAGMAKER.NET",
                            NormalizedUserName = "TAALJOKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEDHf9vRrI0H43g1MGI12lN6JeUceL7Of73I/3mOJrlY3xNBeTMTTeZBJ92MA7eczg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fe5f080-fbd4-46b0-af77-85765360240e",
                            TwoFactorEnabled = false,
                            UserName = "Taaljoker"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "54eeaaed-cbb8-4f3e-8ef6-81c21ae0af96",
                            Email = "olklo@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLKLO@HOTMAIL.COM",
                            NormalizedUserName = "PALINGDROOL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMFbjYNjb6Ak+2oI89jkTLerW2WkK1BA3r72tPl9E94ONGlQw2ogp8Ti6PQ7l/8x6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43ecf4af-01dd-43ae-a93a-5978d94c1e33",
                            TwoFactorEnabled = false,
                            UserName = "Palingdrool"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1991, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "802b5f97-d512-4c5f-b123-30f14c440f96",
                            Email = "wsmets1991@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WSMETS1991@GMAIL.COM",
                            NormalizedUserName = "WSMETS",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVkMD8XtzqFRFM8n+n7hwIIpxwIEfd5Zc/ahe7IqhXd3F7mECogndW7oGx7eOOAMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db7592f4-86f4-4285-88aa-e73627eec7a7",
                            TwoFactorEnabled = false,
                            UserName = "WSmets"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1982, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "15f54a44-da05-43d3-ac76-64a8f9632801",
                            Email = "maarten.raviola@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAARTEN.RAVIOLA@HOTMAIL.COM",
                            NormalizedUserName = "MAVOLIA",
                            PasswordHash = "AQAAAAEAACcQAAAAECYwifoPYXZpZp2ArB/RbfBIUvokAkVUTgkbMVAPrMMnPDW+aCiQ9p2OGCbofd/zUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbff954e-d377-477e-8e46-75834c90ce3e",
                            TwoFactorEnabled = false,
                            UserName = "Mavolia"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2006, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "32576220-3ef1-43c6-aa25-92ec2cd6fa97",
                            Email = "toiletbril@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOILETBRIL@GMAIL.COM",
                            NormalizedUserName = "TOITOITOILET",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1196167-1402-42cd-8c4b-8d70f862fa60",
                            TwoFactorEnabled = false,
                            UserName = "Toitoitoilet"
                        });
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.Property<Guid>("IngedrientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngedrientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngedrientRecipe");

                    b.HasData(
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000014"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "13"
                        },
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("CreatedRecipes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Ingedrient", null)
                        .WithMany()
                        .HasForeignKey("IngedrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
