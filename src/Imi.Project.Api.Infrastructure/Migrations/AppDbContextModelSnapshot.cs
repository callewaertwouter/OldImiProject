// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Ingedrients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5387),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5393),
                            Name = "Melk",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5399),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5400),
                            Name = "Laurier",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5404),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5405),
                            Name = "Gehakt",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5409),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5410),
                            Name = "Tomatenpuree",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5415),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5415),
                            Name = "Boter",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5419),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5420),
                            Name = "Paprika",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5424),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5425),
                            Name = "Wortel",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5429),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5430),
                            Name = "Ajuin",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5434),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5435),
                            Name = "Kippenbouillon",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5439),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5440),
                            Name = "Olijfolie",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5444),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5445),
                            Name = "Champignons",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5450),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5451),
                            Name = "Gemalen kaas",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5456),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5457),
                            Name = "Spaghetti",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CreatedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5465),
                            LastEditedOn = new DateTime(2022, 11, 24, 13, 22, 23, 339, DateTimeKind.Utc).AddTicks(5466),
                            Name = "Courgette",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5521),
                            Description = "Dit recept test de werking van dit recept.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5592),
                            Title = "Testrecept",
                            UserId = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5603),
                            Description = "Maak een roux van de boter en de bloem. Dit doe je door de boter in een steelpannetje te smelten. Doe de bloem bij de boter en roer met de garde.\r\n\r\nLaat het mengsel een beetje opdrogen in het pannetje, tot je de geur van koekjes ruikt.\r\n\r\nGiet er beetje bij beetje de koude melk bij en roer telkens het mengsel glad. Breng al roerend aan de kook, op matig vuur. Laat de witte saus indikken en laat nog enkele minuten doorkoken zodat de bloemsmaak verdwijnt.Breng op smaak met nootmuskaat, peper en zout.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5607),
                            Title = "Witte saus",
                            UserId = "4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5614),
                            Description = "Koop brochetten van de slager, easy. Smijt ze in een ovenpan, doe er boter over en zet ze in de combi-oven. Serveer met rijst en wortelen.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5618),
                            Title = "Gemarineerde brochetten",
                            UserId = "2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5624),
                            Description = "Neem een ruime mengschaal, doe er het warm water in en week er de gedroogde paddenstoelen in. Het eekhoorntjesbrood zal z’n smaak afgeven en het water in een bouillon veranderen. Pel de uien en snij ze in grove stukken. Verhit een ruime stoofpot of een soepketel. Smelt er een klont boter in en stoof de stukken ui. Snij de stammen prei overlangs door, snij het donkerste loof weg en spoel ze onder stromend water. Snij de gewassen prei in grove stukken en stoof ze mee met de uien. Pel de look, snij de teentjes grof en laat ze ook meestoven. Maak 2/3 van de Parijse paddenstoelen schoon. Gebruik een borsteltje en snij (indien nodig) het steeltje wat bij. Snij de paddenstoelen vervolgens middendoor en laat ze meestoven. Hou 1/3 van de paddenstoelen opzij. Maak een bouquet garni met enkele blaadjes laurier, wat tijm en (indien beschikbaar) peterseliestengels. Bind alles samen met een eindje keukentouw en laat het kruidentuiltje meestoven. Schil de aardappelen en snij ze in grove stukken. Laat ze meestoven. Zeef de bouillon van eekhoorntjesbrood en giet het vocht in de soepketel met gestoofde groenten. De rubberachtige gewelde paddenstoelen gebruiken we niet. Laat de soep een half uur sudderen op een zacht vuur. Intussen kan je de kaasstengels bereiden. Verwijder het bouquet garni en mix de soep glad met een staafmixer. Je hoeft ze niet te zeven. Mix er ook een flinke scheut room in. Proef de soep en kruid het gerecht naar smaak met wat peper van de molen en een snuif zout.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5628),
                            Title = "Champignonsoep",
                            UserId = "8"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5634),
                            Description = "Meng gehakt en ajuin in een schaal en mix ze. Smijt de mix in een ovenpan en herschaap het tot een brood. Doe er vervolgens paneermeel en boter over. 20 minuten in de combi-oven. Kook de patatten en de bonen. Smakelijk.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5638),
                            Title = "Gehaktbrood met bonen en patatten",
                            UserId = "3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5644),
                            Description = "Wortelen snijden en koken. Kook de patatten. Doe de hamburger in een pan en laat het bakken. Easy-peasy.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5648),
                            Title = "Hamburger met wortel en patatten",
                            UserId = "9"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5655),
                            Description = "1-pansgerecht met viskroketjes en patatjes. Groenten zijn voor de dieren.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5658),
                            Title = "Viskroketjes met gebakken aardappelen",
                            UserId = "5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5665),
                            Description = "Patatten koken tot ze zacht zijn. Water afgieten, doe er melk en nootmuskaat bij. Grillworst in de microgolfoven voor anderhalf minuut ofzo.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5669),
                            Title = "Grillworst met puree",
                            UserId = "7"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5675),
                            Description = "1) Snij de ajuin, paprika, wortelen, courgette en champignons tot je ze klein genoeg vindt. Doe ze vervolgens allemaal in de pot met wat boter.2) Smijt het gehakt in een pan en bak ze lichtjes. Kap ze in kleinere stukken eenmaal de buitenkant gebakken is.3) Kook de spaghetti en voeg voldoende tomatenpuree en kruiden bij de bolognaise.4) Serveer met gemalen kaas.5) Bon appetit.",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5678),
                            Title = "Spaghetti bolognaise",
                            UserId = "2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5685),
                            Description = "Ga naar de frituur ipv te koken. Ongelooflijk goed he LOL!",
                            LastEditedOn = new DateTime(2022, 11, 24, 14, 22, 23, 339, DateTimeKind.Local).AddTicks(5688),
                            Title = "Ongelooflijk goed gerecht",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitsOfMeasure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            MeasureUnit = "gram"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            MeasureUnit = "liter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            MeasureUnit = "blik(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            MeasureUnit = "tak(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            MeasureUnit = "blaadje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            MeasureUnit = "deciliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            MeasureUnit = "centiliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            MeasureUnit = "bakje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            MeasureUnit = "vrij naar keuze"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            MeasureUnit = "geen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            MeasureUnit = " "
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2b521f3e-5f68-443b-aec6-eb06d954e0a9",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyE2QsIW9+z1aafdTfXe/3pQn+VXLAw+CfFvU4c5ADgw8UTfthhEqV2FeU7qEGo2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e83fd804-4613-49c2-86fe-a6533bdd8990",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b4dc635e-9342-4467-a0f0-ea929d94ae14",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEXrLcfHYThbCdbBBLN7t+sT9MZmNR7fcwE3jJxFtoWmN6JD30WEmEhbm+oBPkotow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "310401d4-efbe-4312-a937-7b4904bddde6",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e3178032-4463-4b52-ab59-223139ea5bcd",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEA4fo4I/d+Lu/if9xOvrTXpYIZ+53VsCv60WI+UpVNx08Z7iegKzkoo6sS+weWcDew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71124c42-3ca5-47a4-a928-cf0e697e9a94",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "864f4729-15b5-4720-adc9-aeb8466be86d",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPl5d9Rf7Rk3LLohpvOsKoOj8mtpZ1zclJHcIkW+Yc6HR6NtJBEuKv0L22uWIwKAIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4323ab41-a1f8-4697-9b70-42106dcdf158",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9e626f4d-2e3f-46ec-b7eb-b1b1ad5ea58f",
                            Email = "woutercallewaert@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WOUTERCALLEWAERT@GMAIL.COM",
                            NormalizedUserName = "YUSIFER",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4+Gn7OStWv0nKjirGocAuaRsuRj/7u/56ZR6hm6axfTfVEs9Eiu/wdZUCOGnIXcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08e408ea-e41a-4865-942c-a77d82edae73",
                            TwoFactorEnabled = false,
                            UserName = "Yusifer"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1980, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "111baeb7-8fca-45b4-8e77-31f5bb2cae20",
                            Email = "jjameson@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JJAMESON@HOTMAIL.COM",
                            NormalizedUserName = "JJJ",
                            PasswordHash = "AQAAAAEAACcQAAAAECJ3+tqYXke2Fb0uuQREW0F1HJBCckKejHOUyR+ulU5WD61/2VKam1XTmZHXpZSeJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b5f5b1a-1ba6-42c1-9a87-d1a78cbc8ec7",
                            TwoFactorEnabled = false,
                            UserName = "JJJ"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "96b8aab7-e8c7-46a3-97b2-76c509396b98",
                            Email = "tigbiddies@xxx.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIGBIDDIES@XXX.COM",
                            NormalizedUserName = "BIGPP",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1n2Kzj8RQMlU7wtZSjZQUxCli1WNnb1hkcNiFT0BG7Z+LWW7GnzdM73zKYyNKzQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07cc76a7-8959-462b-ab81-2ccaaf43fa46",
                            TwoFactorEnabled = false,
                            UserName = "BigPP"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1995, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "69430c6c-2923-43ed-9351-c531d9b55f28",
                            Email = "allthebutz@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLTHEBUTZ@HOTMAIL.COM",
                            NormalizedUserName = "ALLTHEB",
                            PasswordHash = "AQAAAAEAACcQAAAAEPvXo5ZHci+o0ew3NZf4lhQ2M5StyVKqPHlUR6z5qJAXkcfoV2rSMK0N1zpWxLBG1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d61bbed7-c206-42b7-bb1c-fa53cfdeb50b",
                            TwoFactorEnabled = false,
                            UserName = "AlltheB"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2010, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "799812fe-c4d9-4be1-986d-5f6f0bf40d9a",
                            Email = "ikloopindiestrond@gagmaker.net",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IKLOOPINDIESTROND@GAGMAKER.NET",
                            NormalizedUserName = "TAALJOKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEoEEUQ8kFW/IzK2s/2kbwrj2yN9/kXv99OE/0q2ExMOZUX3lL8OGExv80HEcoGUOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c59b8eb-ec98-4aa3-8080-5faf9572a811",
                            TwoFactorEnabled = false,
                            UserName = "Taaljoker"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fab355ca-e8df-4578-b3c5-6734f313f39d",
                            Email = "olklo@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLKLO@HOTMAIL.COM",
                            NormalizedUserName = "PALINGDROOL",
                            PasswordHash = "AQAAAAEAACcQAAAAEM0eNAUyUctvcgzrNZ69JkO0Y2S5SyGVKi0AQKVz48KlmcQfpb6dboCWPbjftmSIjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afdcd317-7c90-46cc-80fa-b198d263688c",
                            TwoFactorEnabled = false,
                            UserName = "Palingdrool"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1991, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "95910d69-bf86-4f46-b2c1-4a1d02255500",
                            Email = "wsmets1991@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WSMETS1991@GMAIL.COM",
                            NormalizedUserName = "WSMETS",
                            PasswordHash = "AQAAAAEAACcQAAAAEKk24Y2DAIBft7qhimnhd6TEDZlthHwQseli0Pkz0jhEcEu0guWMhl6DjPrEQ2wSsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc793d50-25a5-4da4-a9fb-e8e718470563",
                            TwoFactorEnabled = false,
                            UserName = "WSmets"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1982, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a46c355c-cdbc-4c06-a67e-c3bfa859f7f1",
                            Email = "maarten.raviola@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAARTEN.RAVIOLA@HOTMAIL.COM",
                            NormalizedUserName = "MAVOLIA",
                            PasswordHash = "AQAAAAEAACcQAAAAENb+anoghDPfvdwN5tRYpOQeh3QwG2Fyqw1DTKv2tgkLQlrAEJXwozETiCMXSBgvHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e97f631-d093-457e-b492-98d83e5e5d6c",
                            TwoFactorEnabled = false,
                            UserName = "Mavolia"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2006, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "cb8cf5ad-504d-4a5c-95ea-912904a3cd0e",
                            Email = "toiletbril@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOILETBRIL@GMAIL.COM",
                            NormalizedUserName = "TOITOITOILET",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c21f4a74-25e2-4c0b-bc1b-1c3c42383fd6",
                            TwoFactorEnabled = false,
                            UserName = "Toitoitoilet"
                        });
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.Property<Guid>("IngedrientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngedrientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngedrientRecipe");

                    b.HasData(
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000014"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "13"
                        },
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("CreatedRecipes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Ingedrient", null)
                        .WithMany()
                        .HasForeignKey("IngedrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
