// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Ingedrients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8451),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8455),
                            Name = "Melk",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8461),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8462),
                            Name = "Laurier",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8466),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8467),
                            Name = "Gehakt",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8471),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8471),
                            Name = "Tomatenpuree",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8476),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8476),
                            Name = "Boter",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8481),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8481),
                            Name = "Paprika",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8486),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8487),
                            Name = "Wortel",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8491),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8492),
                            Name = "Ajuin",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8498),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8499),
                            Name = "Kippenbouillon",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8503),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8504),
                            Name = "Olijfolie",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8508),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8509),
                            Name = "Champignons",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8518),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8519),
                            Name = "Gemalen kaas",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8523),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8524),
                            Name = "Spaghetti",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CreatedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8528),
                            LastEditedOn = new DateTime(2022, 11, 24, 8, 48, 58, 364, DateTimeKind.Utc).AddTicks(8528),
                            Name = "Courgette",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8581),
                            Description = "Dit recept test de werking van dit recept.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8679),
                            Title = "Testrecept"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8688),
                            Description = "Maak een roux van de boter en de bloem. Dit doe je door de boter in een steelpannetje te smelten. Doe de bloem bij de boter en roer met de garde.\r\n\r\nLaat het mengsel een beetje opdrogen in het pannetje, tot je de geur van koekjes ruikt.\r\n\r\nGiet er beetje bij beetje de koude melk bij en roer telkens het mengsel glad. Breng al roerend aan de kook, op matig vuur. Laat de witte saus indikken en laat nog enkele minuten doorkoken zodat de bloemsmaak verdwijnt.Breng op smaak met nootmuskaat, peper en zout.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8691),
                            Title = "Witte saus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8697),
                            Description = "Koop brochetten van de slager, easy. Smijt ze in een ovenpan, doe er boter over en zet ze in de combi-oven. Serveer met rijst en wortelen.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8701),
                            Title = "Gemarineerde brochetten"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8707),
                            Description = "Neem een ruime mengschaal, doe er het warm water in en week er de gedroogde paddenstoelen in. Het eekhoorntjesbrood zal z’n smaak afgeven en het water in een bouillon veranderen. Pel de uien en snij ze in grove stukken. Verhit een ruime stoofpot of een soepketel. Smelt er een klont boter in en stoof de stukken ui. Snij de stammen prei overlangs door, snij het donkerste loof weg en spoel ze onder stromend water. Snij de gewassen prei in grove stukken en stoof ze mee met de uien. Pel de look, snij de teentjes grof en laat ze ook meestoven. Maak 2/3 van de Parijse paddenstoelen schoon. Gebruik een borsteltje en snij (indien nodig) het steeltje wat bij. Snij de paddenstoelen vervolgens middendoor en laat ze meestoven. Hou 1/3 van de paddenstoelen opzij. Maak een bouquet garni met enkele blaadjes laurier, wat tijm en (indien beschikbaar) peterseliestengels. Bind alles samen met een eindje keukentouw en laat het kruidentuiltje meestoven. Schil de aardappelen en snij ze in grove stukken. Laat ze meestoven. Zeef de bouillon van eekhoorntjesbrood en giet het vocht in de soepketel met gestoofde groenten. De rubberachtige gewelde paddenstoelen gebruiken we niet. Laat de soep een half uur sudderen op een zacht vuur. Intussen kan je de kaasstengels bereiden. Verwijder het bouquet garni en mix de soep glad met een staafmixer. Je hoeft ze niet te zeven. Mix er ook een flinke scheut room in. Proef de soep en kruid het gerecht naar smaak met wat peper van de molen en een snuif zout.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8711),
                            Title = "Champignonsoep"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8717),
                            Description = "Meng gehakt en ajuin in een schaal en mix ze. Smijt de mix in een ovenpan en herschaap het tot een brood. Doe er vervolgens paneermeel en boter over. 20 minuten in de combi-oven. Kook de patatten en de bonen. Smakelijk.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8721),
                            Title = "Gehaktbrood met bonen en patatten"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8726),
                            Description = "Wortelen snijden en koken. Kook de patatten. Doe de hamburger in een pan en laat het bakken. Easy-peasy.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8730),
                            Title = "Hamburger met wortel en patatten"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8737),
                            Description = "1-pansgerecht met viskroketjes en patatjes. Groenten zijn voor de dieren.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8745),
                            Title = "Viskroketjes met gebakken aardappelen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8753),
                            Description = "Patatten koken tot ze zacht zijn. Water afgieten, doe er melk en nootmuskaat bij. Grillworst in de microgolfoven voor anderhalf minuut ofzo.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8758),
                            Title = "Grillworst met puree"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8767),
                            Description = "1) Snij de ajuin, paprika, wortelen, courgette en champignons tot je ze klein genoeg vindt. Doe ze vervolgens allemaal in de pot met wat boter.2) Smijt het gehakt in een pan en bak ze lichtjes. Kap ze in kleinere stukken eenmaal de buitenkant gebakken is.3) Kook de spaghetti en voeg voldoende tomatenpuree en kruiden bij de bolognaise.4) Serveer met gemalen kaas.5) Bon appetit.",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8773),
                            Title = "Spaghetti bolognaise"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8782),
                            Description = "Ga naar de frituur ipv te koken. Ongelooflijk goed he LOL!",
                            LastEditedOn = new DateTime(2022, 11, 24, 9, 48, 58, 364, DateTimeKind.Local).AddTicks(8787),
                            Title = "Ongelooflijk goed gerecht"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitsOfMeasure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            MeasureUnit = "gram"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            MeasureUnit = "liter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            MeasureUnit = "blik(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            MeasureUnit = "tak(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            MeasureUnit = "blaadje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            MeasureUnit = "deciliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            MeasureUnit = "centiliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            MeasureUnit = "bakje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            MeasureUnit = "vrij naar keuze"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            MeasureUnit = "geen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            MeasureUnit = " "
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "579c221b-de4e-47e6-acad-79c60f4d1956",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJX0/8Csid/mYhB5QMQk7CEOCE0frMMsYNmIG6FJPxCHqwRKAdcklWbOWNdU47LX0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ef70d6f-7d35-4914-b7fc-6da6d67e6fcd",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2587bf60-8853-45d6-9447-309f0139c7fa",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAgl5laGFgiiDyWvDP6qrZZPJq1kXjxL/JubvsBwNj1EliAms5lgPS+RERHhmTAcOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fa84522-810e-418a-8f6c-4d876c06babf",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "73ef3c0b-1b4b-4572-aa3b-d52978cd8c45",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELrHyZPHlV54lzNY1/oSF9tPLqM6habhTvZ6zkzxmMevITrRiKe8+iWopVCog1TJsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd11c83b-3e9e-4e1e-8e62-d60344ebb566",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "84ff3821-952b-4530-95ce-dbb90f17480f",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJuhE+2uMxQdKdmFI4JWAMyBOmC24CICbLD1PmYzdI4u8yT0COyug6HVEsw5ZsSJAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73da36cb-0cd3-4ad0-9161-9cb27ca4aec8",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c31bed7c-23f2-42c9-897c-3ddc54de6ede",
                            Email = "woutercallewaert@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WOUTERCALLEWAERT@GMAIL.COM",
                            NormalizedUserName = "YUSIFER",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNaRSUeYq1UV+gBt1MsvswlbaDbE1MCIYTcumuwaD+atXfWDAi1gwvyWssvAsCHKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc56cf1d-ecef-43da-b2bb-8ab76249c269",
                            TwoFactorEnabled = false,
                            UserName = "Yusifer"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1980, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e31f6ebb-9e76-4134-b2f2-c1aaf2684271",
                            Email = "jjameson@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JJAMESON@HOTMAIL.COM",
                            NormalizedUserName = "JJJ",
                            PasswordHash = "AQAAAAEAACcQAAAAEDAhFmt5NS/YmYtWzfrS7ADFrqwfV5MQU/SXhqgoc+NIrJduHUwr0/ajNPOKqSHPkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80155647-c54a-453a-acfa-1499fdba7e79",
                            TwoFactorEnabled = false,
                            UserName = "JJJ"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "172cddaa-6ca8-4605-ae0c-01e5802b7d0c",
                            Email = "tigbiddies@xxx.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIGBIDDIES@XXX.COM",
                            NormalizedUserName = "BIGPP",
                            PasswordHash = "AQAAAAEAACcQAAAAEARXvWpPBU2TvPHCI7idA0Kc0muXIpmfV9YhMux2Kc792l6QjzaUyeH2kIY3hOqW8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a56b8ea-cf7c-4fc3-b226-791bf8ebb5c3",
                            TwoFactorEnabled = false,
                            UserName = "BigPP"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1995, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "74f27c03-ae51-49ba-82db-c44b3f84f097",
                            Email = "allthebutz@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLTHEBUTZ@HOTMAIL.COM",
                            NormalizedUserName = "ALLTHEB",
                            PasswordHash = "AQAAAAEAACcQAAAAEDzUh+LhY4gQpzoGBsnkaJjP9mPFv94/fSeeK4OP8jCB/rI0jv3QpU9A1JwAp7QwKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "155a50db-e4e1-45e0-9410-9d6c5e04d20f",
                            TwoFactorEnabled = false,
                            UserName = "AlltheB"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2010, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ddc5902e-d815-42e0-b696-30ffb5e4f8ba",
                            Email = "ikloopindiestrond@gagmaker.net",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IKLOOPINDIESTROND@GAGMAKER.NET",
                            NormalizedUserName = "TAALJOKER",
                            PasswordHash = "AQAAAAEAACcQAAAAELGbZdOkvTbbv9t8J1/KDS/Z7HTop3k1WansOtbjAsmUgnVU6FBn25nBexG8xKMi6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2432593-1cf0-4b3c-8994-6535a9d884de",
                            TwoFactorEnabled = false,
                            UserName = "Taaljoker"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4f4923bc-0925-4720-8cc2-e84767c77a58",
                            Email = "olklo@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLKLO@HOTMAIL.COM",
                            NormalizedUserName = "PALINGDROOL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjz0ApBYyAtv2c6LgO6x9lFsdEgBiebKNTiycRhxA81CKLgGcVZ3imGr+l1HdCdig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfb7be00-f866-4376-9368-6747803e000a",
                            TwoFactorEnabled = false,
                            UserName = "Palingdrool"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1991, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0d547642-b7e5-4eed-a443-31504fb06f4e",
                            Email = "wsmets1991@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WSMETS1991@GMAIL.COM",
                            NormalizedUserName = "WSMETS",
                            PasswordHash = "AQAAAAEAACcQAAAAEJLMYPCkwPUyCo3HfLEIGbODjxMZtKTDs6278lYRRvID1Q+Eu1qlOU4kjSFP2zUSRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04cb55b8-dcd7-4bac-87df-666f28832915",
                            TwoFactorEnabled = false,
                            UserName = "WSmets"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1982, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c7314f7f-5bf9-49a1-9eb1-4caee0d6a86f",
                            Email = "maarten.raviola@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAARTEN.RAVIOLA@HOTMAIL.COM",
                            NormalizedUserName = "MAVOLIA",
                            PasswordHash = "AQAAAAEAACcQAAAAENccpncvJlN7xc5bJ57oYl6vnfeHDC0OCgqsZn+kYI4EihhxpoRG1i1bIZIw1c+j0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66708ac9-e5df-4b07-b5bb-31e13450ead5",
                            TwoFactorEnabled = false,
                            UserName = "Mavolia"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2006, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "be2c173a-d975-4eb9-8a91-29cb3fb891d9",
                            Email = "toiletbril@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOILETBRIL@GMAIL.COM",
                            NormalizedUserName = "TOITOITOILET",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27e451e1-8cb6-4c9b-a3c3-42f055b14112",
                            TwoFactorEnabled = false,
                            UserName = "Toitoitoilet"
                        });
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.Property<Guid>("IngedrientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngedrientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngedrientRecipe");

                    b.HasData(
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000014"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "13"
                        },
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("CreatedRecipes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Ingedrient", null)
                        .WithMany()
                        .HasForeignKey("IngedrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
