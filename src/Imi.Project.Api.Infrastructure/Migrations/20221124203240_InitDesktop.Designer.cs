// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221124203240_InitDesktop")]
    partial class InitDesktop
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Ingedrients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1914),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1915),
                            Name = "Melk",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1917),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1917),
                            Name = "Laurier",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1919),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1919),
                            Name = "Gehakt",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1921),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1921),
                            Name = "Tomatenpuree",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1923),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1923),
                            Name = "Boter",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1925),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1925),
                            Name = "Paprika",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1927),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1927),
                            Name = "Wortel",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1929),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1929),
                            Name = "Ajuin",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1931),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1931),
                            Name = "Kippenbouillon",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1933),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1933),
                            Name = "Olijfolie",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1935),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1935),
                            Name = "Champignons",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1938),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1939),
                            Name = "Gemalen kaas",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1940),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1941),
                            Name = "Spaghetti",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CreatedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1965),
                            LastEditedOn = new DateTime(2022, 11, 24, 20, 32, 40, 717, DateTimeKind.Utc).AddTicks(1965),
                            Name = "Courgette",
                            UnitOfMeasureId = new Guid("00000000-0000-0000-0000-000000000011")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(1984),
                            Description = "Dit recept test de werking van dit recept.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2023),
                            Title = "Testrecept",
                            UserId = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2026),
                            Description = "Maak een roux van de boter en de bloem. Dit doe je door de boter in een steelpannetje te smelten. Doe de bloem bij de boter en roer met de garde.\r\n\r\nLaat het mengsel een beetje opdrogen in het pannetje, tot je de geur van koekjes ruikt.\r\n\r\nGiet er beetje bij beetje de koude melk bij en roer telkens het mengsel glad. Breng al roerend aan de kook, op matig vuur. Laat de witte saus indikken en laat nog enkele minuten doorkoken zodat de bloemsmaak verdwijnt.Breng op smaak met nootmuskaat, peper en zout.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2027),
                            Title = "Witte saus",
                            UserId = "4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2031),
                            Description = "Koop brochetten van de slager, easy. Smijt ze in een ovenpan, doe er boter over en zet ze in de combi-oven. Serveer met rijst en wortelen.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2032),
                            Title = "Gemarineerde brochetten",
                            UserId = "2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2035),
                            Description = "Neem een ruime mengschaal, doe er het warm water in en week er de gedroogde paddenstoelen in. Het eekhoorntjesbrood zal z’n smaak afgeven en het water in een bouillon veranderen. Pel de uien en snij ze in grove stukken. Verhit een ruime stoofpot of een soepketel. Smelt er een klont boter in en stoof de stukken ui. Snij de stammen prei overlangs door, snij het donkerste loof weg en spoel ze onder stromend water. Snij de gewassen prei in grove stukken en stoof ze mee met de uien. Pel de look, snij de teentjes grof en laat ze ook meestoven. Maak 2/3 van de Parijse paddenstoelen schoon. Gebruik een borsteltje en snij (indien nodig) het steeltje wat bij. Snij de paddenstoelen vervolgens middendoor en laat ze meestoven. Hou 1/3 van de paddenstoelen opzij. Maak een bouquet garni met enkele blaadjes laurier, wat tijm en (indien beschikbaar) peterseliestengels. Bind alles samen met een eindje keukentouw en laat het kruidentuiltje meestoven. Schil de aardappelen en snij ze in grove stukken. Laat ze meestoven. Zeef de bouillon van eekhoorntjesbrood en giet het vocht in de soepketel met gestoofde groenten. De rubberachtige gewelde paddenstoelen gebruiken we niet. Laat de soep een half uur sudderen op een zacht vuur. Intussen kan je de kaasstengels bereiden. Verwijder het bouquet garni en mix de soep glad met een staafmixer. Je hoeft ze niet te zeven. Mix er ook een flinke scheut room in. Proef de soep en kruid het gerecht naar smaak met wat peper van de molen en een snuif zout.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2036),
                            Title = "Champignonsoep",
                            UserId = "8"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2039),
                            Description = "Meng gehakt en ajuin in een schaal en mix ze. Smijt de mix in een ovenpan en herschaap het tot een brood. Doe er vervolgens paneermeel en boter over. 20 minuten in de combi-oven. Kook de patatten en de bonen. Smakelijk.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2040),
                            Title = "Gehaktbrood met bonen en patatten",
                            UserId = "3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2043),
                            Description = "Wortelen snijden en koken. Kook de patatten. Doe de hamburger in een pan en laat het bakken. Easy-peasy.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2044),
                            Title = "Hamburger met wortel en patatten",
                            UserId = "9"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2047),
                            Description = "1-pansgerecht met viskroketjes en patatjes. Groenten zijn voor de dieren.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2048),
                            Title = "Viskroketjes met gebakken aardappelen",
                            UserId = "5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2051),
                            Description = "Patatten koken tot ze zacht zijn. Water afgieten, doe er melk en nootmuskaat bij. Grillworst in de microgolfoven voor anderhalf minuut ofzo.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2052),
                            Title = "Grillworst met puree",
                            UserId = "7"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2055),
                            Description = "1) Snij de ajuin, paprika, wortelen, courgette en champignons tot je ze klein genoeg vindt. Doe ze vervolgens allemaal in de pot met wat boter.2) Smijt het gehakt in een pan en bak ze lichtjes. Kap ze in kleinere stukken eenmaal de buitenkant gebakken is.3) Kook de spaghetti en voeg voldoende tomatenpuree en kruiden bij de bolognaise.4) Serveer met gemalen kaas.5) Bon appetit.",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2056),
                            Title = "Spaghetti bolognaise",
                            UserId = "2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2059),
                            Description = "Ga naar de frituur ipv te koken. Ongelooflijk goed he LOL!",
                            LastEditedOn = new DateTime(2022, 11, 24, 21, 32, 40, 717, DateTimeKind.Local).AddTicks(2060),
                            Title = "Ongelooflijk goed gerecht",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitsOfMeasure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            MeasureUnit = "gram"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            MeasureUnit = "liter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            MeasureUnit = "blik(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            MeasureUnit = "tak(ken)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            MeasureUnit = "blaadje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            MeasureUnit = "deciliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            MeasureUnit = "centiliter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            MeasureUnit = "bakje(s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            MeasureUnit = "vrij naar keuze"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            MeasureUnit = "geen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            MeasureUnit = " "
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f8d4d457-b081-43a6-a1aa-91195dc569ab",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7ki3K7ied96YjszVfbXZTgBOEd5qLrev3pd4lkBS15jZtCGaC8fPIqBymLG5A0tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c7ae452-c346-422d-a46d-8b562147bd60",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "32f1aa73-ef98-475c-8c52-fa123efd67f0",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAENfbg91gKnuFV5TmDdNJQ9mmrwDVXZnFlcpQ6AIGe23S/76Toov8dZIp2YMPssNv7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2002a2d1-61e9-4bb0-ae69-43388e899e67",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d9efda31-761f-43c4-83bd-9fdac48d9176",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENeZ38K8EZU75T0GBqguxEjz8s6f947TcEJxKsNhfcAvxG+KgFKxV3B7Xpc5ow152A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0b0f4d1-c260-4f1a-8887-385e9fbcb0e5",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a4b03b57-b632-4601-9023-1c05c0a853bd",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoGladwq8BgcKtqArmrRH20MaYEILMIpVu8DbMc7op0n2quPEVMu0mVC2qoKoK92Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b70592c-eb7e-479c-9c62-64bd30f989f7",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c72709bf-fb0e-46fe-b1a0-24d9f1e1c53d",
                            Email = "woutercallewaert@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WOUTERCALLEWAERT@GMAIL.COM",
                            NormalizedUserName = "YUSIFER",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwRBPb3eItxy+mCPxDS+e6CGTEJYoSO6Z61QMxd2rd0dLlHfwnmLbwBg+tYBLLI1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1905b0cc-9050-471c-bb11-482b89f256da",
                            TwoFactorEnabled = false,
                            UserName = "Yusifer"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1980, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a881a108-6b2b-4c6a-9727-f8802a2d6f1c",
                            Email = "jjameson@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JJAMESON@HOTMAIL.COM",
                            NormalizedUserName = "JJJ",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOpCyQqZga7Tv+NPNGOHQCc0rK5C31BBAVhAln3X5hju4mamBB3O1BrfEqjbACVWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29ba1fd6-fcad-4def-837a-37a6c57c7fee",
                            TwoFactorEnabled = false,
                            UserName = "JJJ"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0bd12edd-dbbe-404d-81b4-324effba04ce",
                            Email = "tigbiddies@xxx.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIGBIDDIES@XXX.COM",
                            NormalizedUserName = "BIGPP",
                            PasswordHash = "AQAAAAEAACcQAAAAEFrVksNAIXh8i8WiVc3G8sFercnOjpv5f9iLTYWSlihImz0TaqKTkio/+N5P5gjHyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53bfc517-e729-4aec-8226-95b55759c00a",
                            TwoFactorEnabled = false,
                            UserName = "BigPP"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1995, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2f4d3eb5-7695-4431-ba4a-c3cc4c462dfb",
                            Email = "allthebutz@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLTHEBUTZ@HOTMAIL.COM",
                            NormalizedUserName = "ALLTHEB",
                            PasswordHash = "AQAAAAEAACcQAAAAEABVkwRZ/wR4vQAZHXV/6ZGwS72WCMMnx7tvIS3SimDJLTpqx7ejjbf+nhtWPS+/+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80e68475-d8bc-423e-9d27-ea067ab32ee1",
                            TwoFactorEnabled = false,
                            UserName = "AlltheB"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2010, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "db71c177-9161-4491-b94a-49f06ebb3295",
                            Email = "ikloopindiestrond@gagmaker.net",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IKLOOPINDIESTROND@GAGMAKER.NET",
                            NormalizedUserName = "TAALJOKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDt05icnoFQo+az7IRzJ0jv32nkjnQfK7FxJy2HYTn2hYcqG57HFH0oPGexbgawAvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13af9ea9-a3f7-461b-ab13-86964a41c4a5",
                            TwoFactorEnabled = false,
                            UserName = "Taaljoker"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b5e9edaa-ea76-4040-91ae-576e876ae104",
                            Email = "olklo@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLKLO@HOTMAIL.COM",
                            NormalizedUserName = "PALINGDROOL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKIEp7ldLXoZ4jweLAFvykWKf0k0S4yREZ6D2HjGoxv372YpRcm3AFZiDrYWWO0ABg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbc38772-139b-4967-999b-f066620f49bf",
                            TwoFactorEnabled = false,
                            UserName = "Palingdrool"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1991, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1cb400d4-ecfa-403a-8f71-67878f6b8437",
                            Email = "wsmets1991@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WSMETS1991@GMAIL.COM",
                            NormalizedUserName = "WSMETS",
                            PasswordHash = "AQAAAAEAACcQAAAAELfU6u+fOJ2NvwmM1urnEeH2DflwTVSoXu6xrpbIiKKzUgONEQKEb14trWlIdLs0DQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9428d0ef-91bd-40ec-a319-71521696cd2a",
                            TwoFactorEnabled = false,
                            UserName = "WSmets"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1982, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8698bf88-bd05-4681-88a6-852e1b5ed756",
                            Email = "maarten.raviola@hotmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAARTEN.RAVIOLA@HOTMAIL.COM",
                            NormalizedUserName = "MAVOLIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEC6MyX6kQaY78sliUJdPhWNebcBy2DC3lrvDJFbJH30c8qvjJANCBxB2dBksfl81IA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "944a816b-1470-4be9-bcc7-04a3b7907d75",
                            TwoFactorEnabled = false,
                            UserName = "Mavolia"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2006, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f437d35b-aa9b-4522-8cdd-9ab73e2b6468",
                            Email = "toiletbril@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOILETBRIL@GMAIL.COM",
                            NormalizedUserName = "TOITOITOILET",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e96fb988-6eaa-4497-9681-e141df14f225",
                            TwoFactorEnabled = false,
                            UserName = "Toitoitoilet"
                        });
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.Property<Guid>("IngedrientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngedrientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngedrientRecipe");

                    b.HasData(
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000014"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngedrientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "13"
                        },
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "refuser",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingedrient", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("CreatedRecipes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IngedrientRecipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Ingedrient", null)
                        .WithMany()
                        .HasForeignKey("IngedrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
