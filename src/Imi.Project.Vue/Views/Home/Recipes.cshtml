@{
    ViewData["Title"] = "Recipes with Vue";
}

<div class="text-center">
    <h1 class="display-3">Recipes</h1>
</div>

<div id="app">
    <div class="row">
        <div class="col-md-6">
            <div class="search-wrapper">
                <input type="text" v-model="search" placeholder="Search recipe.." class="form-control" />
            </div>
            <div class="wrapper">
                <div class="col-md-3" v-for="recipe in filteredList" :key="recipe.id" v-on:click="getRecipeDetails(recipe)">
                    {{ recipe.title }}
                </div>
            </div>
            <button type="button" class="btn btn-success mt-3" v-on:click="toggleCreateDiv">Create</button>
            <div class="create-div mt-3" v-if="showCreateDiv">
                <h5>Create New Recipe</h5>
                <form enctype="multipart/form-data">
                    <div class="form-group">
                        <label>Title</label>
                        <input class="form-control" v-model="newRecipe" />
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <input class="form-control" v-model="newRecipeDescription" />
                    </div>
                    <div class="form-group">
                        <label>Image</label>
                        <input type="file" class="form-control" id="imageInput" v-on:change="handleImageChange" />
                    </div>
                    <button type="button" class="btn btn-success" v-on:click="createRecipe">Create</button>
                </form>
            </div>
        </div>
        <div class="col-md-6">
            <div v-if="currentRecipe">
                <p><strong>ID:</strong> {{ currentRecipe.id }}</p>
                <div class="form-group">
                    <label><strong>Title:</strong></label>
                    <template v-if="!isUpdating">
                        <span>{{ currentRecipe.title }}</span>
                    </template>
                    <template v-else>
                        <input class="form-control" v-model="editedRecipeTitle" :readonly="!isUpdating" />
                    </template>
                </div>
                <div class="form-group">
                    <label><strong>Description:</strong></label>
                    <template v-if="!isUpdating">
                        <span>{{ currentRecipe.description }}</span>
                    </template>
                    <template v-else>
                        <input class="form-control" v-model="editedRecipeDescription" :readonly="!isUpdating" />
                    </template>
                </div>
                <div class="form-group">
                    <label><strong>Ingredients:</strong></label>
                    <template v-if="!isUpdating">
                        <ul>
                            <li v-for="ingredient in currentRecipe.ingedrients">{{ ingredient.name }}</li>
                        </ul>
                    </template>
                    <template v-else>
                        <div v-for="(ingredient, index) in currentRecipe.ingedrients" :key="index">
                            <input class="form-control" v-model="ingredient.name" :readonly="!isUpdating" />
                        </div>
                    </template>
                </div>
                <div class="btn-group mb-5" role="group" aria-label="Basic example">
                    <button class="btn btn-primary" v-on:click="toggleEdit">
                        {{ isUpdating ? "Update" : "Edit" }}
                    </button>
                    <button class="btn btn-danger" v-on:click="deleteRecipe">Delete</button>
                    <button class="btn btn-warning" v-if="isUpdating" v-on:click="exitEditMode">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>

    <script>
        const baseUrl = "https://localhost:5001/api/recipes";
        var app = new Vue({
            el: "#app",
            data: {
                recipes: [],
                currentRecipe: null,
                editedRecipeTitle: "",
                editedRecipeDescription: "",
                isUpdating: false,
                newRecipe: "",
                newRecipeDescription: "",
                search: "",
                showCreateDiv: false,
                selectedImage: null
            },

            computed: {
                filteredList() {
                    if (!this.search) {
                        return this.recipes;
                    }

                    return this.recipes.filter(recipe => {
                        return recipe.title && recipe.title.toLowerCase().includes(this.search.toLowerCase())
                    });
                }
            },

            created: function () {
                var self = this;
                self.fetchRecipes();
            },

            methods: {
                fetchRecipes: function () {
                    var self = this;
                    axios.get(`${baseUrl}`)
                        .then(function (response) {
                            self.recipes = response.data;
                            console.log(self.recipes);
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },

                getRecipeDetails: function (recipe) {
                    var self = this;
                    self.currentRecipe = recipe;
                },

                createRecipe: function () {
                    const formData = new FormData();
                    formData.append("title", this.newRecipe);
                    formData.append("description", this.newRecipeDescription);
                    formData.append("image", this.selectedImage);

                    axios.post(`${baseUrl}`, formData, {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    })
                        .then((response) => {
                            this.recipes.unshift(response.data);
                            this.newRecipe = "";
                            this.newRecipeDescription = "";
                            this.currentRecipe = null;
                            this.showCreateDiv = false;
                            this.fetchRecipes();
                        })
                        .catch((error) => {
                            console.error(error);
                        });
                },

                updateRecipe: function () {
                    if (this.isUpdating) {
                        const requestBody = {
                            id: this.currentRecipe.id,
                            title: this.editedRecipeTitle,
                            description: this.editedRecipeDescription
                        };

                        axios.put(`${baseUrl}/${this.currentRecipe.id}`, requestBody)
                            .then((response) => {
                                this.fetchRecipes();
                                this.isUpdating = false;
                            })
                            .catch((error) => {
                                console.error(error);
                            });
                    }
                },

                deleteRecipe: function () {
                    if (confirm("Are you sure?")) {
                        axios.delete(`${baseUrl}/${this.currentRecipe.id}`)
                            .then(() => {
                                this.currentRecipe = null;
                                this.fetchRecipes();
                            })
                            .catch((error) => {
                                console.error(error);
                            });
                    }
                },

                toggleEdit: function () {
                    if (this.isUpdating) {
                        axios.put(`${baseUrl}/${this.currentRecipe.id}`, {
                            title: this.currentRecipe.title,
                            description: this.currentRecipe.description
                        })
                            .then((response) => {
                                this.fetchRecipes();
                                this.isUpdating = false;
                            })
                            .catch((error) => {
                                console.error(error);
                            });
                    } else {
                        this.isUpdating = true;
                        this.editedRecipeTitle = this.currentRecipe.title;
                        this.editedRecipeDescription = this.currentRecipe.description;
                    }
                },

                exitEditMode: function () {
                    this.isUpdating = false;
                    this.editedRecipeTitle = "";
                    this.editedRecipeDescription = "";
                },

                toggleCreateDiv: function () {
                    this.showCreateDiv = !this.showCreateDiv;
                },

                handleImageChange(event) {
                    const selectedFile = event.target.files[0];

                    if (selectedFile) {
                        const reader = new FileReader();

                        reader.onload = (e) => {
                            const img = new Image();
                            img.src = e.target.result;

                            img.onload = () => {
                                const maxWidth = 200;
                                const maxHeight = 100;

                                let newWidth = img.width;
                                let newHeight = img.height;

                                if (img.width > maxWidth) {
                                    newWidth = maxWidth;
                                    newHeight = (img.height * maxWidth) / img.width;
                                }

                                if (newHeight > maxHeight) {
                                    newHeight = maxHeight;
                                    newWidth = (img.width * maxHeight) / img.height;
                                }

                                const canvas = document.createElement("canvas");
                                canvas.width = newWidth;
                                canvas.height = newHeight;
                                const ctx = canvas.getContext("2d");

                                ctx.drawImage(img, 0, 0, newWidth, newHeight);

                                canvas.toBlob((blob) => {
                                }, selectedFile.type);
                            };
                        };

                        reader.readAsDataURL(selectedFile);
                    }
                }
            }
        });
    </script>
}
