@{
    ViewData["Title"] = "Recipes with Vue";
}

<div class="text-center">
    <h1 class="display-3">Recipes</h1>
</div>

<div id="app">
    <div class="row" v-if="!showCurrentRecipeDetails">
        <input type="text"
               v-model="recipeSearch"
               class="form-control mb-5"
               placeholder="Search for a recipe..."
               v-on:input="searchRecipe" />

        <div class="col-md-12">
            <div class="recipe-list">
                <div class="recipe-item" v-for="recipe in recipes" :key="recipe.id" v-on:click="getRecipeDetails(recipe)">
                    <h3>{{ recipe.title }}</h3>
                    <p>{{ recipe.description }}</p>
                    <a href="#" class="btn btn-primary" v-on:click="showCurrentRecipeDetails(recipe)">Details</a>
                </div>
            </div>
        </div>
    </div>

    <div class="row" v-if="showCurrentRecipeDetails">
        <div class="col-md-12">
            <div class="recipe-details">
                <h3>{{ recipeDetails.title }}</h3>
                <p>{{ recipeDetails.description }}</p>
                <button class="btn btn-primary" v-on:click="goBack">Go Back</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>

    <script>
        const baseUrl = "https://localhost:5001/api";
        var app = new Vue({
            el: "#app",
            data: {
                recipes: [],
                currentRecipe: null,
                showCurrentRecipeDetails: false,
                recipeDetails: {},
                recipeSearch: ""
            },

            created: function () {
                var self = this;
                self.fetchRecipes();
            },

            methods: {
                fetchRecipes: async function () {
                    var self = this;
                    await axios.get(`${baseUrl}/recipes`)
                        .then(function (response) {
                            self.recipes = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },

                getRecipeDetails: function (recipe) {
                    var self = this;
                    self.currentRecipe = recipe;
                },

                showCurrentRecipeDetails: async function (currentRecipe) {
                    await axios.get(`${baseUrl}/recipes/${currentRecipe.id}`)
                        .then((response) => {
                            this.recipeDetails = response.data;
                            this.showCurrentRecipeDetails = true;
                        })
                        .catch((e) => {
                            console.log(e.message);
                        });
                },

                goBack: function () {
                    this.showCurrentRecipeDetails = false;
                    this.recipeDetails = {};
                },

                searchRecipe: function () {
                    const searchQuery = this.recipeSearch.trim();

                    if (searchQuery === "") {
                        this.fetchRecipes();
                        return;
                    }

                    axios.get(`${baseUrl}/search?searchQuery=${encodeURIComponent(searchQuery)}`)
                        .then((response) => {
                            this.recipes = response.data;
                        })
                        .catch((e) => {
                            console.log(e.message);
                        });
                },
            }
        });
    </script>
}

