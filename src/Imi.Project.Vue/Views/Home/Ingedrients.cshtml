@{
    ViewData["Title"] = "Ingedrients with Vue";
}

<div class="text-center">
    <h1 class="display-3">Ingedrients</h1>
</div>

<div id="app">
    <div class="row">
        <div class="col-md-6">
            <div class="search-wrapper">
                <input type="text" v-model="search" placeholder="Search ingredient.." />
            </div>
            <div class="wrapper">
                <div class="col-md-3" v-for="ingedrient in filteredList" v-on:click="getIngedrientDetails(ingedrient)">
                    {{ ingedrient.name }}
                </div>
            </div>
            <button type="button" class="btn btn-success mt-3" v-on:click="toggleCreateDiv">Create</button>
            <div class="create-div mt-3" v-if="showCreateDiv">
                <h5>Create New Ingredient</h5>
                <form>
                    <div class="form-group">
                        <label>Name</label>
                        <input class="form-control" v-model="newIngedrient" />
                    </div>
                    <div class="form-group">
                        <label>Measure Unit</label>
                        <input class="form-control" v-model="newIngedrientMeasureUnit" />
                    </div>
                    <button type="button" class="btn btn-success" v-on:click="createIngedrient">Create</button>
                </form>
            </div>
        </div>
        <div class="col-md-6">
            <div v-if="currentIngedrient">
                <p><strong>ID:</strong> {{ currentIngedrient.id }}</p>
                <div class="form-group">
                    <label><strong>Name:</strong></label>
                    <template v-if="!isUpdating">
                        <span>{{ currentIngedrient.name }}</span>
                    </template>
                    <template v-else>
                        <input class="form-control" v-model="editedIngedrient" :readonly="!isUpdating" />
                    </template>
                </div>
                <div class="form-group">
                    <label><strong>Measure Unit:</strong></label>
                    <template v-if="!isUpdating">
                        <span>{{ currentIngedrient.measureUnit }}</span>
                    </template>
                    <template v-else>
                        <input class="form-control" v-model="currentIngedrient.measureUnit" :readonly="!isUpdating" />
                    </template>
                </div>
                <div class="btn-group mb-5" role="group" aria-label="Basic example">
                    <button class="btn btn-primary" v-on:click="toggleEdit">
                        {{ isUpdating ? "Update" : "Edit" }}
                    </button>
                    <button class="btn btn-danger" v-on:click="deleteIngedrient">Delete</button>
                    <button class="btn btn-warning" v-if="isUpdating" v-on:click="exitEditMode">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>

    <script>
        const baseUrl = "https://localhost:5001/api/ingedrients";
        var app = new Vue({
            el: "#app",
            data: {
                ingedrients: [],
                currentIngedrient: null,
                editedIngedrient: "",
                isUpdating: false,
                newIngedrient: "",
                newIngedrientMeasureUnit: "",
                search: "",
                showCreateDiv: false
            },

            computed: {
                filteredList() {
                    if (!this.search) {
                        return this.ingedrients;
                    }

                    return this.ingedrients.filter(ingedrient => {
                        return ingedrient.name && ingedrient.name.toLowerCase().includes(this.search.toLowerCase())
                    });
                }
            },

            created: function () {
                var self = this;
                self.fetchIngedrients();
            },

            methods: {
                fetchIngedrients: function () {
                    var self = this;
                    axios.get(`${baseUrl}`)
                        .then(function (response) {
                            self.ingedrients = response.data;
                            console.log(self.ingedrients);
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },

                getIngedrientDetails: function (ingedrient) {
                    var self = this;
                    self.currentIngedrient = ingedrient;
                },

                createIngedrient: function () {
                    if (this.newIngedrient.trim() === ""/* || this.newIngedrientMeasureUnit.trim() === ""*/) {
                        alert("Name is required!");
                        return;
                    }

                    const newIngedrient = {
                        name: this.newIngedrient,
                        measureUnit: this.newIngedrientMeasureUnit
                    };

                    axios.post(`${baseUrl}`, newIngedrient)
                        .then((response) => {
                            this.ingedrients.unshift(response.data);
                            this.newIngedrient = "";
                            this.newIngedrientMeasureUnit = "";
                            this.currentIngedrient = null;
                            this.showCreateDiv = false;
                            this.fetchIngedrients();
                        })
                        .catch((error) => {
                            console.error(error);
                        });
                },

                updateIngedrient: function () {
                    if (this.isUpdating) {
                        const requestBody = {
                            id: this.currentIngedrient.id,
                            name: this.editedIngedrient,
                            unitOfMeasure: this.currentIngedrient.measureUnit
                        };

                        axios.put(`${baseUrl}/${this.currentIngedrient.id}`, requestBody)
                            .then((response) => {
                                this.fetchIngedrients();
                                this.isUpdating = false;
                            })
                            .catch((error) => {
                                console.error(error);
                            });
                    }
                }
                ,


                deleteIngedrient: function () {
                    if (confirm("Are you sure?")) {
                        axios.delete(`${baseUrl}/${this.currentIngedrient.id}`)
                            .then((response) => {
                                this.currentIngedrient = null;

                                this.fetchIngedrients();
                            })
                            .catch((error) => {
                                console.error(error);
                            });
                    }
                },

                toggleEdit: function () {
                    if (this.isUpdating) {
                        axios.put(`${baseUrl}/${this.currentIngedrient.id}`, {
                            name: this.currentIngedrient.name,
                            measureUnit: this.currentIngedrient.measureUnit
                        })
                            .then((response) => {
                                this.fetchIngedrients();
                                this.isUpdating = false;
                            })
                            .catch((error) => {
                                console.error(error);
                            });
                    } else {
                        this.isUpdating = true;
                        this.editedIngedrient = this.currentIngedrient.name;
                    }
                },

                exitEditMode: function () {
                    this.isUpdating = false;
                    this.editedIngedrient = this.currentIngedrient.name;
                },

                toggleCreateDiv: function () {
                    this.showCreateDiv = !this.showCreateDiv;
                }
            }
        });
    </script>
}