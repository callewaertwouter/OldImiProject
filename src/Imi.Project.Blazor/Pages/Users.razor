@page "/users"
@using Imi.Project.Blazor.Models
@using Imi.Project.Blazor.Services.Crud
@inject ICRUDService<MockUser> service;

<h3>Users</h3>

<div class="mt-3">
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">
            @error
        </div>
    }

    @if (currentUser == null)
    {
        <UserList Users="users">
        </UserList>
    }
    else
    {
        <UserForm User="currentUser">
        </UserForm>
    }
</div>

@code {
    private MockUser[]? users;
    private MockUser? currentUser;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await RefreshUsers();
    }

    public async Task RefreshUsers()
    {
        users = (await service.GetAll()).ToArray();
        this.currentUser = null;
    }

    public void AddUser()
    {
        this.currentUser = new MockUser();
    }

    public async Task EditUser(MockUser item)
    {
        this.currentUser = await service.Get(item.Id);
    }

    public async Task SaveUser(MockUser item)
    {
        try
        {
            if (currentUser.Id == 0) await service.Create(currentUser);
            else await service.Update(currentUser);

            await this.RefreshUsers();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }

    public async Task DeleteUser(MockUser item)
    {
        try
        {
            await service.Delete(item.Id);
            await this.RefreshUsers();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
}